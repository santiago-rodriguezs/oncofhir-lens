import { NextRequest, NextResponse } from "next/server";
import { pdfToText } from "@/lib/pdf";
import { sonnetJson } from "@/lib/sonnet";
import { VariantArraySchema } from "@/lib/schemas";

// Define Node.js runtime
export const runtime = "nodejs";

/**
 * POST handler for PDF upload
 */
export async function POST(request: NextRequest) {
  try {
    // Parse form data
    const formData = await request.formData();
    const file = formData.get("file") as File | null;
    
    console.log("üìÅ File received:", file?.name, file?.type);
    
    // Validate file
    if (!file || file.type !== "application/pdf") {
      console.error("‚ùå Invalid file type:", file?.type);
      return NextResponse.json(
        { error: "Se requiere un archivo PDF v√°lido" },
        { status: 400 }
      );
    }
    
    // Convert file to buffer
    console.log("üîÑ Converting file to buffer...");
    const buffer = Buffer.from(await file.arrayBuffer());
    
    // Extract text from PDF
    console.log("üìÑ Extracting text from PDF...");
    const text = await pdfToText(buffer);
    console.log(`‚úÖ Extracted ${text.length} characters`);
    
    // Validate extracted text
    if (!text || text.trim().length < 100) {
      console.error("‚ùå Insufficient text extracted:", text.length);
      return NextResponse.json(
        { error: "No se pudo extraer texto √∫til del PDF" },
        { status: 422 }
      );
    }
    
    console.log("üìù First 200 chars of extracted text:", text.substring(0, 200));
    
    // System prompt for Sonnet
    const system = "Eres un genetista cl√≠nico especializado en interpretaci√≥n de informes de secuenciaci√≥n.\nA partir del texto plano de un estudio gen√≥mico, extrae SOLO JSON v√°lido (sin markdown ni comentarios) seg√∫n el siguiente esquema:\n\nVariant[] = [{\n  \"gene\": string,\n  \"chrom\"?: string,\n  \"pos\"?: number,\n  \"ref\"?: string,\n  \"alt\"?: string,\n  \"hgvs_c\"?: string,\n  \"hgvs_p\"?: string,\n  \"vaf\"?: number\n}]\n\n- Usa 'vaf' entre 0 y 1 si aparece porcentaje (ej: 22% ‚Üí 0.22)\n- Normaliza cromosomas (1..22,X,Y)\n- Si el texto es ambiguo, deja campos vac√≠os\n- Devuelve SOLO JSON, sin texto adicional";
    
    // User payload
    const user = {
      reportText: text
    };
    
    console.log("üß¨ Calling Sonnet 4.5 for variant extraction...");
    
    // Extract variants using Sonnet 4.5
    const variants = await sonnetJson(
      "claude-sonnet-4-5-20250929",
      system,
      JSON.stringify(user),
      "VariantArray",
      VariantArraySchema
    );
    
    // Log extracted variants
    console.log(`‚úÖ Extracted ${variants.length} variants from PDF`);
    if (variants.length > 0) {
      console.log("üìä First variant:", JSON.stringify(variants[0], null, 2));
    }
    
    // Return variants
    return NextResponse.json({ variants }, { status: 200 });
  } catch (error) {
    console.error("‚ùå Error processing PDF:", error);
    console.error("Stack trace:", error instanceof Error ? error.stack : "No stack trace");
    
    return NextResponse.json(
      { error: error instanceof Error ? error.message : "Error desconocido al procesar el PDF" },
      { status: 500 }
    );
  }
}